/-
Copyright (c) 2022 Christopher Hoskin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Christopher Hoskin
-/
import analysis.normed_space.basic
import algebra.ring.idempotents
import tactic.noncomm_ring

/-!
# M-structure

A projection P on a normed space X is said to be an L-projection if, for all `x` in `X`,
$$
‚à•x‚à• = ‚à•P x‚à• + ‚à•(1 - P) x‚à•.
$$
The range of an L-projection is said to be an L-summand of X.

A projection P on a normed space X is said to be an M-projection if, for all `x` in `X`,
$$
‚à•x‚à• = max(‚à•P x‚à•,‚à•(1 - P) x‚à•).
$$
The range of an M-projection is said to be an M-summand of X.

The L-projections and M-projections form Boolean algebras. When X is a Banach space, the Boolean
algebra of L-projections is complete.

Let `X` be a normed space with dual `X^*`. A closed subspace `M` of `X` is said to be an M-ideal if
the topological annihilator `M^‚àò` is an L-summand of `X^*`.

M-ideal, M-summands and L-summands were introduced by Alfsen and Effros in [alfseneffros1972] to
study the structure of general Banach spaces. When `A` is a JB*-triple, the M-ideals of `A` are
exactly the norm-closed ideals of `A`. When `A` is a JBW*-triple with predual `X`, the M-summands of
`A` are exactly the weak*-closed ideals, and their pre-duals can be identified with the L-summands
of `X`. In the special case when `A` is a C*-algebra, the M-ideals are exactly the norm-closed
two-sided ideals of `A`, when `A` is also a W*-algebra the M-summands are exactly the weak*-closed
two-sided ideals of `A`.

## Implementation notes

The approach to showing that the L-projections form a Boolean algebra is inspired by
`measure_theory.measurable_space`.

## References

* [Behrends, M-structure and the Banach-Stone Theorem][behrends1979]
* [Harmand, Werner, Werner, M-ideals in Banach spaces and Banach algebras][harmandwernerwerner1993]

## Tags

M-summand, M-projection, L-summand, L-projection, M-ideal, M-structure

-/

variables (X : Type*) [normed_group X]

variables {ùïú : Type*} [normed_field ùïú] [normed_space ùïú X]


variables {M : Type} [ring M] [module M X]
/--
A projection on a normed space `X` is said to be an L-projection if, for all `x` in `X`,
$$
‚à•x‚à• = ‚à•P x‚à• + ‚à•(1 - P) x‚à•.
$$
-/
structure is_Lprojection (P : M) : Prop :=
(proj : is_idempotent_elem P)
(Lnorm : ‚àÄ (x : X), ‚à•x‚à• = ‚à•P ‚Ä¢ x‚à• + ‚à•(1 - P) ‚Ä¢ x‚à•)

/--
A projection on a normed space `X` is said to be an M-projection if, for all `x` in `X`,
$$
‚à•x‚à• = max(‚à•P x‚à•, ‚à•(1 - P) x‚à•).
$$
-/
structure is_Mprojection (P : M) : Prop :=
(proj : is_idempotent_elem P)
(Mnorm : ‚àÄ (x : X), ‚à•x‚à• = (max ‚à•P ‚Ä¢ x‚à•  ‚à•(1 - P) ‚Ä¢ x‚à•))

variables {X}

namespace is_Lprojection

lemma Lcomplement {P : M} (h: is_Lprojection X P) :  is_Lprojection X (1 - P) :=
‚ü®h.proj.one_sub, Œª x, by { rw [add_comm, sub_sub_cancel], exact h.Lnorm x }‚ü©

lemma Lcomplement_iff (P : M) : is_Lprojection X P ‚Üî is_Lprojection X (1 - P) :=
‚ü®Lcomplement, Œª h, sub_sub_cancel 1 P ‚ñ∏ h.Lcomplement‚ü©

lemma commute [has_faithful_scalar M X] {P Q : M} (h‚ÇÅ : is_Lprojection X P)
  (h‚ÇÇ : is_Lprojection X Q) : commute P Q :=
begin
  have PR_eq_RPR : ‚àÄ R : (M), is_Lprojection X R ‚Üí  (P * R = R * P * R) :=Œª R h‚ÇÉ,
  begin
    refine @eq_of_smul_eq_smul _ X _ _ _ _ (Œª x, _),
    rw ‚Üê norm_sub_eq_zero_iff,
    have e1 : ‚à•R ‚Ä¢ x‚à• ‚â• ‚à•R ‚Ä¢ x‚à• + 2 ‚Ä¢ ‚à• (P * R) ‚Ä¢ x - (R * P * R) ‚Ä¢ x‚à• :=
    calc ‚à•R ‚Ä¢ x‚à• = ‚à•R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à• + ‚à•(1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à• + (‚à•(R * R) ‚Ä¢ x - R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à•
      + ‚à•(1 - R) ‚Ä¢ ((1 - P) ‚Ä¢ (R ‚Ä¢ x))‚à•) :
      by rw [h‚ÇÅ.Lnorm, h‚ÇÉ.Lnorm, h‚ÇÉ.Lnorm ((1 - P) ‚Ä¢ (R ‚Ä¢ x)), sub_smul 1 P,
        one_smul, smul_sub, mul_smul]
    ... = ‚à•R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à• + ‚à•(1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à• + (‚à•R ‚Ä¢ x - R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à•
      + ‚à•((1 - R) * R) ‚Ä¢ x - (1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à•) : by rw [h‚ÇÉ.proj.eq,
        sub_smul 1 P, one_smul, smul_sub, mul_smul]
    ... = ‚à•R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à• + ‚à•(1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à• +
          (‚à•R ‚Ä¢ x - R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à• + ‚à•(1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à•) :
      by rw [sub_mul, h‚ÇÉ.proj.eq, one_mul, sub_self, zero_smul, zero_sub,
        norm_neg]
    ... = ‚à•R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à• + ‚à•R ‚Ä¢ x - R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à• + 2‚Ä¢‚à•(1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à•  : by abel
    ... ‚â• ‚à•R ‚Ä¢ x‚à• + 2 ‚Ä¢ ‚à• (P * R) ‚Ä¢ x - (R * P * R) ‚Ä¢ x‚à• :
      by {
        rw ge,
        have := add_le_add_right (norm_le_insert' (R ‚Ä¢ x) (R ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x)))) (2‚Ä¢‚à•(1 - R) ‚Ä¢ (P ‚Ä¢ (R ‚Ä¢ x))‚à•),
        simpa only [mul_smul, sub_smul, one_smul] using this,
      },
    rw ge at e1,
    nth_rewrite_rhs 0 ‚Üê add_zero (‚à•R ‚Ä¢ x‚à•) at e1,
    rw [add_le_add_iff_left, two_smul,  ‚Üê two_mul]  at e1,
    rw le_antisymm_iff,
    refine ‚ü®_, norm_nonneg _‚ü©,
    rwa [‚Üêmul_zero (2 : ‚Ñù), mul_le_mul_left (show (0 : ‚Ñù) < 2, by norm_num)] at e1
  end,
  have QP_eq_QPQ : Q * P = Q * P * Q,
  { have e1 : P * (1 - Q) = P * (1 - Q) - (Q * P - Q * P * Q) :=
    calc P * (1 - Q) = (1 - Q) * P * (1 - Q) : by rw PR_eq_RPR (1 - Q) h‚ÇÇ.Lcomplement
    ... = P * (1 - Q) - (Q * P - Q * P * Q) : by noncomm_ring,
    rwa [eq_sub_iff_add_eq, add_right_eq_self, sub_eq_zero] at e1 },
  show P * Q = Q * P, by rw [QP_eq_QPQ, PR_eq_RPR Q h‚ÇÇ]
end

lemma mul [has_faithful_scalar M X] {P Q : M} (h‚ÇÅ : is_Lprojection X P) (h‚ÇÇ : is_Lprojection X Q) :
  is_Lprojection X (P * Q) :=
begin
  refine ‚ü®is_idempotent_elem.mul_of_commute (h‚ÇÅ.commute h‚ÇÇ) h‚ÇÅ.proj h‚ÇÇ.proj, _‚ü©,
  intro x,
  refine le_antisymm _ _,
  { calc ‚à• x ‚à• = ‚à•(P * Q) ‚Ä¢ x + (x - (P * Q) ‚Ä¢ x)‚à• : by rw add_sub_cancel'_right ((P * Q) ‚Ä¢ x) x
    ... ‚â§ ‚à•(P * Q) ‚Ä¢ x‚à• + ‚à• x - (P * Q) ‚Ä¢ x ‚à• : by apply norm_add_le
    ... = ‚à•(P * Q) ‚Ä¢ x‚à• + ‚à•(1 - P * Q) ‚Ä¢ x‚à• : by rw [sub_smul,
      one_smul] },
  { calc ‚à•x‚à• = ‚à•P ‚Ä¢ (Q ‚Ä¢ x)‚à• + (‚à•Q ‚Ä¢ x - P ‚Ä¢ (Q ‚Ä¢ x)‚à• + ‚à•x - Q ‚Ä¢ x‚à•) : by
      rw [h‚ÇÇ.Lnorm x, h‚ÇÅ.Lnorm (Q ‚Ä¢ x),
          sub_smul, one_smul,
          sub_smul, one_smul, add_assoc]
    ... ‚â• ‚à•P ‚Ä¢ (Q ‚Ä¢ x)‚à• + ‚à•(Q ‚Ä¢ x - P ‚Ä¢ (Q ‚Ä¢ x)) + (x - Q ‚Ä¢ x)‚à• :
      (add_le_add_iff_left (‚à•P ‚Ä¢ (Q ‚Ä¢ x)‚à•)).mpr (norm_add_le (Q ‚Ä¢ x - P ‚Ä¢ (Q ‚Ä¢ x)) (x - Q ‚Ä¢ x))
    ... = ‚à•(P * Q) ‚Ä¢ x‚à• + ‚à•(1 - P * Q) ‚Ä¢ x‚à• : by rw [sub_add_sub_cancel',
      sub_smul, one_smul,
      mul_smul] }
end

lemma join [has_faithful_scalar M X] {P Q : M} (h‚ÇÅ : is_Lprojection X P) (h‚ÇÇ : is_Lprojection X Q) :
  is_Lprojection X (P + Q - P * Q) :=
begin
  convert (Lcomplement_iff _).mp (h‚ÇÅ.Lcomplement.mul h‚ÇÇ.Lcomplement) using 1,
  noncomm_ring,
end

instance : has_compl { f : M // is_Lprojection X f } :=
‚ü®Œª P, ‚ü®1 - P, P.prop.Lcomplement‚ü©‚ü©

@[simp] lemma coe_compl (P : {P : M // is_Lprojection X P}) :
  ‚Üë(P·∂ú) = (1 : M) - ‚ÜëP := rfl

instance [has_faithful_scalar M X] : has_inf {P : M // is_Lprojection X P} :=
‚ü®Œª P Q, ‚ü®P * Q, P.prop.mul Q.prop‚ü© ‚ü©

@[simp] lemma coe_inf [has_faithful_scalar M X] (P Q : {P : M // is_Lprojection X P}) :
  ‚Üë(P ‚äì Q) = ((‚ÜëP : (M)) * ‚ÜëQ) := rfl

instance [has_faithful_scalar M X] : has_sup {P : M // is_Lprojection X P} :=
‚ü®Œª P Q, ‚ü®P + Q - P * Q, P.prop.join Q.prop‚ü© ‚ü©

@[simp] lemma coe_sup [has_faithful_scalar M X] (P Q : {P : M // is_Lprojection X P}) :
  ‚Üë(P ‚äî Q) = ((‚ÜëP : M) + ‚ÜëQ - ‚ÜëP * ‚ÜëQ) := rfl

instance [has_faithful_scalar M X] : has_sdiff {P : M // is_Lprojection X P} :=
‚ü®Œª P Q, ‚ü®P * (1 - Q), by exact P.prop.mul Q.prop.Lcomplement ‚ü©‚ü©

@[simp] lemma coe_sdiff [has_faithful_scalar M X] (P Q : {P : M // is_Lprojection X P}) :
  ‚Üë(P \ Q) = (‚ÜëP : M) * (1 - ‚ÜëQ) := rfl

instance [has_faithful_scalar M X] : partial_order {P : M // is_Lprojection X P} :=
{ le := Œª P Q, (‚ÜëP : M) = ‚Üë(P ‚äì Q),
  le_refl := Œª P, by simpa only [coe_inf, ‚Üêsq] using (P.prop.proj.eq).symm,
  le_trans := Œª P Q R h‚ÇÅ h‚ÇÇ, by { simp only [coe_inf] at ‚ä¢ h‚ÇÅ h‚ÇÇ, rw [h‚ÇÅ, mul_assoc, ‚Üêh‚ÇÇ] },
  le_antisymm := Œª P Q h‚ÇÅ h‚ÇÇ, subtype.eq (by convert (P.prop.commute Q.prop).eq) }

lemma le_def [has_faithful_scalar M X] (P Q : {P : M // is_Lprojection X P}) :
  P ‚â§ Q ‚Üî (P : M) = ‚Üë(P ‚äì Q) :=
iff.rfl

instance : has_zero {P : M // is_Lprojection X P}  :=
‚ü®‚ü®0, ‚ü®by rw [is_idempotent_elem, zero_mul],
     Œª x, by simp only [zero_smul, norm_zero, sub_zero,
                        one_smul, zero_add]‚ü©‚ü©‚ü©

@[simp] lemma coe_zero : ‚Üë(0 : {P : M // is_Lprojection X P}) = (0 : M) :=
rfl

instance : has_one {P : M // is_Lprojection X P}  :=
‚ü®‚ü®1, sub_zero (1 : M) ‚ñ∏ (0 : {P : M // is_Lprojection X P}).prop.Lcomplement‚ü©‚ü©

@[simp] lemma coe_one : ‚Üë(1 : {P : M // is_Lprojection X P}) = (1 : M) :=
rfl

instance [has_faithful_scalar M X] : bounded_order {P : M // is_Lprojection X P} :=
{ top := 1,
  le_top := Œª P, (mul_one (P : M)).symm,
  bot := 0,
  bot_le := Œª P, (zero_mul (P : M)).symm, }

@[simp] lemma coe_bot [has_faithful_scalar M X] : ‚Üë(bounded_order.bot : {P : M // is_Lprojection X P}) = (0 : M)
  := rfl

@[simp] lemma coe_top [has_faithful_scalar M X] : ‚Üë(bounded_order.top : {P : M // is_Lprojection X P}) = (1 : M)
  := rfl

lemma compl_mul_left {P : {P : M // is_Lprojection X P}} {Q : M} :
  Q - ‚ÜëP * Q = ‚ÜëP·∂ú * Q := by rw [coe_compl, sub_mul, one_mul]

lemma compl_orthog {P : {P : M // is_Lprojection X P}} :
  (‚ÜëP : M) * (‚ÜëP·∂ú) = 0 :=
by rw [coe_compl, mul_sub, mul_one, P.prop.proj.eq, sub_self]

lemma distrib_lattice_lemma [has_faithful_scalar M X] {P Q R : {P : M // is_Lprojection X P}} :
  ((‚ÜëP : M) + ‚ÜëP·∂ú * R) * (‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú) = (‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú) :=
by rw [add_mul, mul_add, mul_add, mul_assoc ‚ÜëP·∂ú ‚ÜëR (‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú), ‚Üê mul_assoc ‚ÜëR (‚ÜëQ * ‚ÜëR)  ‚ÜëP·∂ú,
    ‚Üê coe_inf Q, (P·∂ú.prop.commute R.prop).eq, ((Q ‚äì R).prop.commute P·∂ú.prop).eq,
    (R.prop.commute (Q ‚äì R).prop).eq, coe_inf Q, mul_assoc ‚ÜëQ, ‚Üê mul_assoc, mul_assoc ‚ÜëR,
    (P·∂ú.prop.commute P.prop).eq, compl_orthog, zero_mul, mul_zero, zero_add, add_zero, ‚Üê mul_assoc,
    P.prop.proj.eq, R.prop.proj.eq, ‚Üê coe_inf Q, mul_assoc, ((Q ‚äì R).prop.commute P·∂ú.prop).eq,
    ‚Üê mul_assoc, P·∂ú.prop.proj.eq]

instance [has_faithful_scalar M X] : distrib_lattice {P : M // is_Lprojection X P} :=
{ le_sup_left := Œª P Q, by rw [le_def, coe_inf, coe_sup, ‚Üê add_sub, mul_add, mul_sub, ‚Üê mul_assoc,
    P.prop.proj.eq, sub_self, add_zero],
  le_sup_right := Œª P Q,
  begin
    rw [le_def, coe_inf, coe_sup, ‚Üê add_sub, mul_add, mul_sub, commute.eq (commute P.prop Q.prop),
      ‚Üê mul_assoc, Q.prop.proj.eq, add_sub_cancel'_right],
  end,
  sup_le := Œª P Q R,
  begin
    rw [le_def, le_def, le_def, coe_inf, coe_inf, coe_sup, coe_inf, coe_sup, ‚Üê add_sub, add_mul,
      sub_mul, mul_assoc],
    intros h‚ÇÅ h‚ÇÇ,
    rw [‚Üê h‚ÇÇ, ‚Üê h‚ÇÅ],
  end,
  inf_le_left := Œª P Q, by rw [le_def, coe_inf, coe_inf, coe_inf, mul_assoc,
    (Q.prop.commute P.prop).eq, ‚Üê mul_assoc, P.prop.proj.eq],
  inf_le_right := Œª P Q, by rw [le_def, coe_inf, coe_inf, coe_inf, mul_assoc, Q.prop.proj.eq],
  le_inf := Œª P Q R,
  begin
    rw [le_def, le_def, le_def, coe_inf, coe_inf, coe_inf, coe_inf, ‚Üê mul_assoc],
    intros h‚ÇÅ h‚ÇÇ,
    rw [‚Üê h‚ÇÅ, ‚Üê h‚ÇÇ],
  end,
  le_sup_inf := Œª P Q R,
  begin
    have e‚ÇÅ: ‚Üë((P ‚äî Q) ‚äì (P ‚äî R)) = ‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú :=
    by rw [coe_inf, coe_sup, coe_sup,
      ‚Üê add_sub, ‚Üê add_sub, compl_mul_left, compl_mul_left, add_mul, mul_add,
      (P·∂ú.prop.commute Q.prop).eq, mul_add, ‚Üê mul_assoc, mul_assoc ‚ÜëQ, (P·∂ú.prop.commute P.prop).eq,
      compl_orthog, zero_mul, mul_zero, zero_add, add_zero, ‚Üê mul_assoc, mul_assoc ‚ÜëQ,
      P.prop.proj.eq, P·∂ú.prop.proj.eq, mul_assoc, (P·∂ú.prop.commute R.prop).eq, ‚Üê mul_assoc],
    have e‚ÇÇ : ‚Üë((P ‚äî Q) ‚äì (P ‚äî R)) * ‚Üë(P ‚äî Q ‚äì R) = ‚ÜëP + ‚ÜëQ * ‚ÜëR * ‚ÜëP·∂ú := by rw [coe_inf, coe_sup,
      coe_sup, coe_sup, ‚Üê add_sub, ‚Üê add_sub, ‚Üê add_sub, compl_mul_left, compl_mul_left,
      compl_mul_left, (P·∂ú.prop.commute (Q‚äìR).prop).eq, coe_inf, mul_assoc, distrib_lattice_lemma,
      (Q.prop.commute R.prop).eq, distrib_lattice_lemma],
    rw [le_def, e‚ÇÅ, coe_inf, e‚ÇÇ],
  end,
  .. is_Lprojection.subtype.has_inf,
  .. is_Lprojection.subtype.has_sup,
  .. is_Lprojection.subtype.partial_order }

instance [has_faithful_scalar M X] : boolean_algebra {P : M // is_Lprojection X P} :=
{ sup_inf_sdiff := Œª P Q,
  subtype.ext (by rw [coe_sup, coe_inf, coe_sdiff, mul_assoc, ‚Üê mul_assoc ‚ÜëQ,
    (Q.prop.commute P.prop).eq, mul_assoc ‚ÜëP ‚ÜëQ, ‚Üê coe_compl, compl_orthog, mul_zero, mul_zero,
    sub_zero, ‚Üê mul_add, coe_compl, add_sub_cancel'_right, mul_one]),
  inf_inf_sdiff := Œª P Q,
    subtype.ext (by rw [coe_inf, coe_inf, coe_sdiff, coe_bot, mul_assoc, ‚Üê mul_assoc ‚ÜëQ,
    (Q.prop.commute P.prop).eq, ‚Üê coe_compl, mul_assoc, compl_orthog, mul_zero, mul_zero]),
  inf_compl_le_bot := Œª P,
    (subtype.ext (by rw [coe_inf, coe_compl, coe_bot, ‚Üê coe_compl, compl_orthog])).le,
  top_le_sup_compl := Œª P, (subtype.ext(by rw [coe_top, coe_sup, coe_compl,
    add_sub_cancel'_right, ‚Üê coe_compl, compl_orthog, sub_zero])).le,
  sdiff_eq := Œª P Q,
  subtype.ext
  (by rw [coe_sdiff, ‚Üê coe_compl, coe_inf]),
  .. is_Lprojection.subtype.has_compl,
  .. is_Lprojection.subtype.has_sdiff,
  .. is_Lprojection.subtype.bounded_order,
  .. is_Lprojection.subtype.distrib_lattice }

end is_Lprojection
